class HashTable:
	def __init__(self):
		#Create a Size of HashTable
		self.size = 10
		#Lish comprehension for hashmap
		self.hashmap = [[] for _ in range (self.size)]

	def hashing_func(self, key):
		hashed_key = hash(key) % self.size
		return hashed_key

	def set(self,key, value):
		hash_key = self.hashing_func(key)
		key_exists = False
		slot = self.hashmap[hash_key]
		#Chaining
		for i, kv in enumerate(slot):
			k, v = kv
			if key == k:
				key_exists == True
				break

		if key_exists:
			slot[i] = ((key, value))
		else:
			slot.append((key,value))

	def get(self, key):
		hash_key = self.hashing_func(key)
		slot = self.hashmap[hash_key]
		for kv in slot:
			k, v = kv
			if key == k:
				return v
			else:
				raise KeyError('does not exist')

	def __setitem__(self,key,value):
		return self.set(key,value)

	def __getitem__(self, key):
		return self.get(key)

H = HashTable()

H['Key1'] = 'value1'

print(H['Key1'])hggbv   
